/*
 *
 *  * Copyright (C) 2019 Darel Bitsy
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  *     http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License
 *
 */

plugins {
    id("com.android.library")
    id("kotlin-multiplatform")
    id("org.jetbrains.kotlin.plugin.noarg") version("1.3.11")
    id("maven-publish")
}

group Configurations.groupId
version Configurations.domainVersion

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            setRoot("src/androidMain")
            java.srcDirs = ["src/androidMain/kotlin"]
        }

        test {
            setRoot("src/androidTest")
            java.srcDirs = ["src/androidTest/kotlin"]
        }
    }
}

dependencies {
    api(KotlinLibraries.stdlibJdk7)
    implementation(ThirdPartiesLibraries.cleanArchCoreJvm)
//    testImplementation(KotlinLibraries.testJvm)
//    testImplementation(KotlinLibraries.testJunitJvm)
//    androidTestImplementation(KotlinLibraries.testJvm)
//    androidTestImplementation(KotlinLibraries.testJunitJvm)
}

noArg {
    annotation("com.dbeginc.dbshopping.domain.utils.EmptyConstructor")
}

kotlin {
    android() {

    }
    jvm("backend") {
        compilations.all {
            kotlinOptions {
                jvmTarget = '1.8'
            }
        }
    }

    def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
    def ios = (buildForDevice) ? iosArm64("ios") : iosX64("ios")
    configure([ios]) {
        binaries {
            framework {
                // Disable bitcode embedding for the simulator build.
                if (!buildForDevice) {
                    embedBitcode("disable")
                }
            }
        }
    }
    
    def cleanArchCoreNative = (buildForDevice) ? ThirdPartiesLibraries.cleanArchCoreIosarm64 : ThirdPartiesLibraries.cleanArchCoreIosX64

    sourceSets {
        commonMain {
            dependencies {
                implementation(kotlin('stdlib-common'))
                implementation(ThirdPartiesLibraries.cleanArchCore)
                implementation(ThirdPartiesLibraries.cleanArchCoreMetadata)
            }
        }
        commonTest {
            dependencies {
                implementation(kotlin('test-common'))
                implementation(kotlin('test-annotations-common'))
            }
        }
        jvm("backend").compilations.main.defaultSourceSet {
            dependencies {
                api(kotlin('stdlib-jdk8'))
                implementation(ThirdPartiesLibraries.cleanArchCoreJvm)
                implementation(SpringDependencies.springBootStarter + ":${Configurations.springBootFrameworkVersion}")
            }
        }
        jvm("backend").compilations.test.defaultSourceSet {
            dependencies {
                implementation(kotlin('test'))
                implementation(kotlin('test-junit'))
                implementation(SpringDependencies.springBootStarterTest + ":${Configurations.springBootFrameworkVersion}")
            }
        }
        androidMain {
        }
        androidTest {
        }
        iosMain {
            dependencies {
                implementation(kotlin("stdlib"))
                api(cleanArchCoreNative)
            }
        }
    }
}

configurations {
    compileClasspath
}